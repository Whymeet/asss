<?php
/** –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ª–∏—Å—Ç–æ–≤–æ–∫ */
if (!defined("B_PROLOG_INCLUDED") || B_PROLOG_INCLUDED !== true) die();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞
if (!$arResult['CONFIG_LOADED']) {
    echo '<div style="color: red; padding: 20px;">–û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞</div>';
    return;
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –ë–∏—Ç—Ä–∏–∫—Å–∞
CJSCore::Init(['ajax', 'window']);
?>

<div class="calc-container" style="max-width: 800px; font-family: Arial, sans-serif;">
    <form id="listCalcForm" style="background: #f9f9f9; padding: 20px; border-radius: 8px;">
        
        <!-- –¢–∏–ø –±—É–º–∞–≥–∏ -->
        <div style="margin: 15px 0;">
            <label style="display: block; margin-bottom: 5px; font-weight: bold;">–¢–∏–ø –±—É–º–∞–≥–∏:</label>
            <select name="paperType" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" required>
                <?php foreach ($arResult['PAPER_TYPES'] as $paper): ?>
                    <option value="<?= htmlspecialchars($paper['ID']) ?>"><?= htmlspecialchars($paper['NAME']) ?></option>
                <?php endforeach; ?>
            </select>
        </div>

        <!-- –§–æ—Ä–º–∞—Ç -->
        <div style="margin: 15px 0;">
            <label style="display: block; margin-bottom: 5px; font-weight: bold;">–§–æ—Ä–º–∞—Ç:</label>
            <select name="size" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" required>
                <?php foreach ($arResult['FORMATS'] as $format): ?>
                    <option value="<?= htmlspecialchars($format['ID']) ?>"><?= htmlspecialchars($format['NAME']) ?></option>
                <?php endforeach; ?>
            </select>
        </div>

        <!-- –¢–∏—Ä–∞–∂ -->
        <div style="margin: 15px 0;">
            <label style="display: block; margin-bottom: 5px; font-weight: bold;">–¢–∏—Ä–∞–∂:</label>
            <input name="quantity" type="number" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" min="1" value="1000" required>
        </div>

        <!-- –¢–∏–ø –ø–µ—á–∞—Ç–∏ -->
        <div style="margin: 15px 0;">
            <label style="display: block; margin-bottom: 5px; font-weight: bold;">–¢–∏–ø –ø–µ—á–∞—Ç–∏:</label>
            <div>
                <label style="margin-right: 15px;"><input type="radio" name="printType" value="single" checked> –û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è</label>
                <label><input type="radio" name="printType" value="double"> –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è</label>
            </div>
        </div>

        <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ -->
        <div style="margin: 15px 0;">
            <label style="display: block; margin-bottom: 5px; font-weight: bold;">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</label>
            <div>
                <label style="display: block;"><input type="checkbox" name="bigovka"> –ë–∏–≥–æ–≤–∫–∞</label>
                <label style="display: block;"><input type="checkbox" name="perforation"> –ü–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è</label>
                <label style="display: block;"><input type="checkbox" name="drill"> –°–≤–µ—Ä–ª–µ–Ω–∏–µ √ò5–º–º</label>
                <label style="display: block;"><input type="checkbox" name="numbering"> –ù—É–º–µ—Ä–∞—Ü–∏—è</label>
            </div>
        </div>

        <!-- –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤ -->
        <div style="margin: 15px 0;">
            <label style="display: block; margin-bottom: 5px; font-weight: bold;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–æ–≤ (0-4):</label>
            <input name="cornerRadius" type="number" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" min="0" max="4" value="0">
        </div>

        <input type="hidden" name="calcType" value="list">
        <input type="hidden" name="sessid" value="<?= bitrix_sessid() ?>">

        <button id="calcBtn" type="button" style="padding: 12px 24px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 16px;">–†–∞—Å—Å—á–∏—Ç–∞—Ç—å</button>
        
        <div id="calcResult" style="margin-top: 20px;"></div>
    </form>
</div>

<script>
// –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å—Ä–∞–∑—É
window.addEventListener('error', function(e) {
    if (e.message && (
        e.message.includes('Cannot set properties of null') || 
        e.message.includes('recaptcha') ||
        e.message.includes('mail.ru') ||
        e.message.includes('top-fwz1')
    )) {
        console.log('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤–Ω–µ—à–Ω—è—è –æ—à–∏–±–∫–∞:', e.message);
        e.preventDefault();
        return true;
    }
});

window.addEventListener('unhandledrejection', function(e) {
    if (e.reason === null || (e.reason && e.reason.toString().includes('recaptcha'))) {
        console.log('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞ Promise');
        e.preventDefault();
        return true;
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è BX —Å —Ç–∞–π–º–∞—É—Ç–æ–º
function waitForBX(callback, fallbackCallback, timeout = 3000) {
    const startTime = Date.now();
    
    function checkBX() {
        if (typeof BX !== 'undefined' && BX.ajax) {
            console.log('‚úÖ BX –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑', Date.now() - startTime, '–º—Å');
            callback();
        } else if (Date.now() - startTime < timeout) {
            setTimeout(checkBX, 50);
        } else {
            console.warn('‚ö†Ô∏è BX –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞', timeout, '–º—Å. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç');
            fallbackCallback();
        }
    }
    
    checkBX();
}

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å BX
function initWithBX() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å BX.ajax');
    
    const form = document.getElementById('listCalcForm');
    const resultDiv = document.getElementById('calcResult');
    const calcBtn = document.getElementById('calcBtn');
    
    if (!form || !resultDiv || !calcBtn) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    calcBtn.addEventListener('click', function() {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ BX.ajax');
        
        const data = collectFormData(form);
        resultDiv.innerHTML = '<div style="padding: 10px; color: #666;">‚è≥ –†–∞—Å—á–µ—Ç...</div>';

        BX.ajax.runComponentAction('my:print.calc', 'calc', {
            mode: 'class',
            data: data
        }).then(function(response) {
            console.log('üì• –û—Ç–≤–µ—Ç BX:', response);
            handleResponse(response, resultDiv);
        }).catch(function(error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ BX:', error);
            resultDiv.innerHTML = '<div style="color: red; padding: 10px; background: #ffebee; border-radius: 4px;">–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + 
                (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') + '</div>';
        });
    });
}

// –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ BX
function initWithoutBX() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ BX (fetch)');
    
    const form = document.getElementById('listCalcForm');
    const resultDiv = document.getElementById('calcResult');
    const calcBtn = document.getElementById('calcBtn');
    
    if (!form || !resultDiv || !calcBtn) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    calcBtn.addEventListener('click', function() {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ fetch');
        
        const data = collectFormData(form);
        resultDiv.innerHTML = '<div style="padding: 10px; color: #666;">‚è≥ –†–∞—Å—á–µ—Ç...</div>';

        fetch('/bitrix/services/main/ajax.php?c=my:print.calc&action=calc&mode=class', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams(data)
        })
        .then(response => response.json())
        .then(response => {
            console.log('üì• –û—Ç–≤–µ—Ç fetch:', response);
            handleResponse(response, resultDiv);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ fetch:', error);
            resultDiv.innerHTML = '<div style="color: red; padding: 10px; background: #ffebee; border-radius: 4px;">–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + 
                error.message + '</div>';
        });
    });
}

// –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
function collectFormData(form) {
    const formData = new FormData(form);
    const data = {};
    
    for (let [key, value] of formData.entries()) {
        data[key] = value;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å—ã
    data.bigovka = form.querySelector('input[name="bigovka"]').checked;
    data.perforation = form.querySelector('input[name="perforation"]').checked;
    data.drill = form.querySelector('input[name="drill"]').checked;
    data.numbering = form.querySelector('input[name="numbering"]').checked;

    console.log('üìã –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
    return data;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
function handleResponse(response, resultDiv) {
    if (response.data) {
        if (response.data.error) {
            resultDiv.innerHTML = '<div style="color: red; padding: 10px; background: #ffebee; border-radius: 4px;">‚ùå ' + 
                response.data.error + '</div>';
        } else {
            displayResult(response.data, resultDiv);
        }
    } else {
        resultDiv.innerHTML = '<div style="color: red; padding: 10px; background: #ffebee; border-radius: 4px;">‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞</div>';
        console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', response);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ –¥–µ—Å—è—Ç—ã—Ö
function displayResult(result, resultDiv) {
    console.log('üìä –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    
    // –û–∫—Ä—É–≥–ª—è–µ–º –≤—Å–µ —Ü–µ–Ω—ã –¥–æ –¥–µ—Å—è—Ç—ã—Ö
    const totalPrice = Math.round((result.totalPrice || 0) * 10) / 10;
    const printingCost = Math.round((result.printingCost || 0) * 10) / 10;
    const paperCost = Math.round((result.paperCost || 0) * 10) / 10;
    const plateCost = result.plateCost ? Math.round(result.plateCost * 10) / 10 : 0;
    const additionalCosts = result.additionalCosts ? Math.round(result.additionalCosts * 10) / 10 : 0;
    
    let html = '<div style="padding: 20px; background: #e8f5e8; border-radius: 8px; border: 1px solid #4caf50;">';
    html += '<h3 style="margin-top: 0; color: #2e7d32;">‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</h3>';
    html += '<div style="font-size: 24px; font-weight: bold; color: #1b5e20; margin: 15px 0;">üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ' + totalPrice + ' ‚ÇΩ</div>';
    
    if (result.printingType) {
        html += '<p><strong>üñ®Ô∏è –¢–∏–ø –ø–µ—á–∞—Ç–∏:</strong> ' + result.printingType + '</p>';
    }
    
    html += '<details style="margin-top: 15px;"><summary style="cursor: pointer; font-weight: bold;">üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞</summary>';
    html += '<div style="margin-top: 10px; padding: 10px; background: white; border-radius: 4px;">';
    html += '<ul style="margin: 0; padding-left: 20px;">';
    html += '<li>üìÑ –õ–∏—Å—Ç–æ–≤ A3: ' + (result.baseA3Sheets || 0) + '</li>';
    html += '<li>üñ®Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏: ' + printingCost + ' ‚ÇΩ</li>';
    html += '<li>üì∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±—É–º–∞–≥–∏: ' + paperCost + ' ‚ÇΩ</li>';
    if (plateCost > 0) {
        html += '<li>üîß –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Å—Ç–∏–Ω: ' + plateCost + ' ‚ÇΩ</li>';
    }
    if (additionalCosts > 0) {
        html += '<li>‚≠ê –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: ' + additionalCosts + ' ‚ÇΩ</li>';
    }
    html += '</ul>';
    html += '</div>';
    html += '</details>';
    html += '</div>';
    
    resultDiv.innerHTML = html;
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
console.log('üöÄ === –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –õ–ò–°–¢–û–í–û–ö ===');
console.log('‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toLocaleTimeString());

document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º BX...');
    waitForBX(initWithBX, initWithoutBX, 3000);
});
</script>